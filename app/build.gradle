apply plugin: "com.android.application"
apply plugin: "com.google.gms.google-services"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

project.afterEvaluate {

    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def unitTestTask = "test${variantName.capitalize()}UnitTest"
                def androidTestCoverageTask = "create${variantName.capitalize()}CoverageReport"

                tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
                        "$unitTestTask",
                        "$androidTestCoverageTask"
                ]) {
                    group = "Reporting"
                    description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"

                    reports {
                        html.enabled = true
                        xml.enabled = true
                        csv.enabled = true
                    }

                    def excludes = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        // butterKnife
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        // dagger
                        '**/*_MembersInjector.class',
                        '**/Dagger*Component.class',
                        '**/Dagger*Component$Builder.class',
                        '**/*Module_*Factory.class',
                        '**/di/module/*',
                        '**/*_Factory*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*'
                    ]

                    def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir,
                            excludes: excludes)
                    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}",
                            excludes: excludes)

                    classDirectories.setFrom(files([
                            javaClasses,
                            kotlinClasses
                    ]))

                    def variantSourceSets = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
                    sourceDirectories.setFrom(project.files(variantSourceSets))

                    def androidTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage/${variantName}AndroidTest/connected/", includes: ["**/*.ec"])

                    executionData(files([
                            "$project.buildDir/jacoco/${unitTestTask}.exec",
                            androidTestsData
                    ]))
                }

            }
}

android {

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.college.collegeconnect"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "0.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    signingConfigs {
//        release {
//            keyAlias keystoreProperties["keyAlias"]
//            keyPassword keystoreProperties["keyPassword"]
//            storeFile rootProject.file("keystore/collegeconnect-keystore.jks")
//            storePassword keystoreProperties["storePassword"]
//        }
        debug{
            keyAlias "ccdebug"
            keyPassword "ccdebug"
            storeFile rootProject.file("keystore/debug.keystore")
            storePassword "ccdebug"
        }

    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            versionNameSuffix "-debug-version"
            testCoverageEnabled true
        }
        release {
//            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }

    }
}

android.testOptions {
    unitTests.all {
        useJUnitPlatform()
    }
}

dependencies {
    def room_version = "2.3.0-alpha03"
    def lifecycle_version = "2.2.0"
    def kotest_version = "4.3.0"
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.google.android.material:material:1.2.1"
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.2"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.2"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "com.google.firebase:firebase-firestore:22.0.0"
    implementation "com.google.firebase:firebase-messaging:21.0.0"
    implementation "com.google.firebase:firebase-inappmessaging-display:19.1.2"
    implementation "com.google.firebase:firebase-ads:19.6.0"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "com.google.firebase:firebase-analytics:18.0.0"
    implementation "com.google.firebase:firebase-database:19.5.1"
    implementation "com.google.android.gms:play-services-auth:19.0.0"
    implementation "com.google.android.material:material:1.3.0-alpha04"
    implementation "com.github.lzyzsd:circleprogress:1.2.1"
    implementation "com.google.firebase:firebase-storage:19.2.0"
    implementation "com.firebaseui:firebase-ui-storage:6.2.0"
    implementation "com.squareup.picasso:picasso:2.71828"
    implementation "com.github.MikeOrtiz:TouchImageView:2.3.3"
    implementation "com.google.firebase:firebase-auth:20.0.1"
    annotationProcessor "com.github.bumptech.glide:compiler:4.11.0"
    api "com.theartofdev.edmodo:android-image-cropper:2.8.0"
    implementation "de.hdodenhof:circleimageview:3.1.0"
    implementation "com.amulyakhare:com.amulyakhare.textdrawable:1.0.1"
    api "com.github.sujithkanna:smileyrating:2.0.0"
    implementation "com.github.warkiz.widget:indicatorseekbar:2.1.2"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    testImplementation "io.kotest:kotest-runner-junit5-jvm:$kotest_version"
    androidTestImplementation("io.kotest:kotest-runner-junit5-jvm:$kotest_version") {
        exclude(module: "objenesis")
    }
    androidTestImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
    androidTestImplementation "androidx.test:core-ktx:1.3.0"
    androidTestImplementation "androidx.test:core:1.3.0"
    testImplementation "io.mockk:mockk:1.10.3-jdk8"
    testImplementation "io.strikt:strikt-core:0.27.0"
}
